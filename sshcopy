#!/usr/bin/env python3
import os
import paramiko
import argparse
from scp import SCPClient
import threading

def copy_file(ip, local_path, remote_path, is_upload):
    username = os.getenv('SSH_USERNAME')
    password = os.getenv('SSH_PASSWORD')
    
    if not username or not password:
        print(f"Error: SSH_USERNAME or SSH_PASSWORD environment variable not set for {ip}")
        return

    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    try:
        ssh.connect(ip, username=username, password=password)
        with SCPClient(ssh.get_transport()) as scp:
            if is_upload:
                scp.put(local_path, remote_path, recursive=True)
                print(f"Successfully uploaded {local_path} to {ip}:{remote_path}")
            else:
                scp.get(remote_path, local_path, recursive=True)
                print(f"Successfully downloaded {ip}:{remote_path} to {local_path}")
    
    except paramiko.AuthenticationException:
        print(f"Authentication failed for {ip}")
    except paramiko.SSHException as ssh_exception:
        print(f"SSH exception occurred for {ip}: {str(ssh_exception)}")
    except Exception as e:
        print(f"An error occurred for {ip}: {str(e)}")
    
    finally:
        ssh.close()

def copy_file_thread(ip, local_path, remote_path, is_upload):
    thread = threading.Thread(target=copy_file, args=(ip, local_path, remote_path, is_upload))
    thread.start()
    return thread

def read_ips_from_file(file_path):
    try:
        with open(file_path, 'r') as file:
            return [line.strip() for line in file if line.strip()]
    except Exception as e:
        print(f'Error reading the IP file: {e}')
        return []

def main():
    parser = argparse.ArgumentParser(description='Copy files to/from multiple machines using SCP.')
    parser.add_argument('file', help='Path to the file containing IP addresses')
    parser.add_argument('local_path', help='Path to the local file or directory')
    parser.add_argument('remote_path', help='Path on the remote machine')
    parser.add_argument('--download', action='store_true', help='Download files from remote to local (default is upload)')
    args = parser.parse_args()

    ips = read_ips_from_file(args.file)

    if not ips:
        print("No IPs found or error reading the file. Exiting.")
        return

    threads = []
    for ip in ips:
        thread = copy_file_thread(ip, args.local_path, args.remote_path, not args.download)
        threads.append(thread)

    # Wait for all threads to complete
    for thread in threads:
        thread.join()

    print("All file transfers completed.")

if __name__ == "__main__":
    main()
